
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `ChatSession` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model ChatSession
 * 
 */
export type ChatSessionModel = runtime.Types.Result.DefaultSelection<Prisma.$ChatSessionPayload>

export type AggregateChatSession = {
  _count: ChatSessionCountAggregateOutputType | null
  _min: ChatSessionMinAggregateOutputType | null
  _max: ChatSessionMaxAggregateOutputType | null
}

export type ChatSessionMinAggregateOutputType = {
  id: string | null
  sessionId: string | null
  userName: string | null
  userEmail: string | null
  status: $Enums.ChatSessionStatus | null
  createdAt: Date | null
  lastActivity: Date | null
}

export type ChatSessionMaxAggregateOutputType = {
  id: string | null
  sessionId: string | null
  userName: string | null
  userEmail: string | null
  status: $Enums.ChatSessionStatus | null
  createdAt: Date | null
  lastActivity: Date | null
}

export type ChatSessionCountAggregateOutputType = {
  id: number
  sessionId: number
  userName: number
  userEmail: number
  status: number
  createdAt: number
  lastActivity: number
  _all: number
}


export type ChatSessionMinAggregateInputType = {
  id?: true
  sessionId?: true
  userName?: true
  userEmail?: true
  status?: true
  createdAt?: true
  lastActivity?: true
}

export type ChatSessionMaxAggregateInputType = {
  id?: true
  sessionId?: true
  userName?: true
  userEmail?: true
  status?: true
  createdAt?: true
  lastActivity?: true
}

export type ChatSessionCountAggregateInputType = {
  id?: true
  sessionId?: true
  userName?: true
  userEmail?: true
  status?: true
  createdAt?: true
  lastActivity?: true
  _all?: true
}

export type ChatSessionAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ChatSession to aggregate.
   */
  where?: Prisma.ChatSessionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ChatSessions to fetch.
   */
  orderBy?: Prisma.ChatSessionOrderByWithRelationInput | Prisma.ChatSessionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ChatSessionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ChatSessions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ChatSessions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ChatSessions
  **/
  _count?: true | ChatSessionCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ChatSessionMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ChatSessionMaxAggregateInputType
}

export type GetChatSessionAggregateType<T extends ChatSessionAggregateArgs> = {
      [P in keyof T & keyof AggregateChatSession]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateChatSession[P]>
    : Prisma.GetScalarType<T[P], AggregateChatSession[P]>
}




export type ChatSessionGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ChatSessionWhereInput
  orderBy?: Prisma.ChatSessionOrderByWithAggregationInput | Prisma.ChatSessionOrderByWithAggregationInput[]
  by: Prisma.ChatSessionScalarFieldEnum[] | Prisma.ChatSessionScalarFieldEnum
  having?: Prisma.ChatSessionScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ChatSessionCountAggregateInputType | true
  _min?: ChatSessionMinAggregateInputType
  _max?: ChatSessionMaxAggregateInputType
}

export type ChatSessionGroupByOutputType = {
  id: string
  sessionId: string
  userName: string
  userEmail: string
  status: $Enums.ChatSessionStatus
  createdAt: Date
  lastActivity: Date
  _count: ChatSessionCountAggregateOutputType | null
  _min: ChatSessionMinAggregateOutputType | null
  _max: ChatSessionMaxAggregateOutputType | null
}

type GetChatSessionGroupByPayload<T extends ChatSessionGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ChatSessionGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ChatSessionGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ChatSessionGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ChatSessionGroupByOutputType[P]>
      }
    >
  > 



export type ChatSessionWhereInput = {
  AND?: Prisma.ChatSessionWhereInput | Prisma.ChatSessionWhereInput[]
  OR?: Prisma.ChatSessionWhereInput[]
  NOT?: Prisma.ChatSessionWhereInput | Prisma.ChatSessionWhereInput[]
  id?: Prisma.StringFilter<"ChatSession"> | string
  sessionId?: Prisma.StringFilter<"ChatSession"> | string
  userName?: Prisma.StringFilter<"ChatSession"> | string
  userEmail?: Prisma.StringFilter<"ChatSession"> | string
  status?: Prisma.EnumChatSessionStatusFilter<"ChatSession"> | $Enums.ChatSessionStatus
  createdAt?: Prisma.DateTimeFilter<"ChatSession"> | Date | string
  lastActivity?: Prisma.DateTimeFilter<"ChatSession"> | Date | string
  messages?: Prisma.ChatMessageListRelationFilter
}

export type ChatSessionOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  sessionId?: Prisma.SortOrder
  userName?: Prisma.SortOrder
  userEmail?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  lastActivity?: Prisma.SortOrder
  messages?: Prisma.ChatMessageOrderByRelationAggregateInput
}

export type ChatSessionWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  sessionId?: string
  AND?: Prisma.ChatSessionWhereInput | Prisma.ChatSessionWhereInput[]
  OR?: Prisma.ChatSessionWhereInput[]
  NOT?: Prisma.ChatSessionWhereInput | Prisma.ChatSessionWhereInput[]
  userName?: Prisma.StringFilter<"ChatSession"> | string
  userEmail?: Prisma.StringFilter<"ChatSession"> | string
  status?: Prisma.EnumChatSessionStatusFilter<"ChatSession"> | $Enums.ChatSessionStatus
  createdAt?: Prisma.DateTimeFilter<"ChatSession"> | Date | string
  lastActivity?: Prisma.DateTimeFilter<"ChatSession"> | Date | string
  messages?: Prisma.ChatMessageListRelationFilter
}, "id" | "sessionId">

export type ChatSessionOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  sessionId?: Prisma.SortOrder
  userName?: Prisma.SortOrder
  userEmail?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  lastActivity?: Prisma.SortOrder
  _count?: Prisma.ChatSessionCountOrderByAggregateInput
  _max?: Prisma.ChatSessionMaxOrderByAggregateInput
  _min?: Prisma.ChatSessionMinOrderByAggregateInput
}

export type ChatSessionScalarWhereWithAggregatesInput = {
  AND?: Prisma.ChatSessionScalarWhereWithAggregatesInput | Prisma.ChatSessionScalarWhereWithAggregatesInput[]
  OR?: Prisma.ChatSessionScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ChatSessionScalarWhereWithAggregatesInput | Prisma.ChatSessionScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"ChatSession"> | string
  sessionId?: Prisma.StringWithAggregatesFilter<"ChatSession"> | string
  userName?: Prisma.StringWithAggregatesFilter<"ChatSession"> | string
  userEmail?: Prisma.StringWithAggregatesFilter<"ChatSession"> | string
  status?: Prisma.EnumChatSessionStatusWithAggregatesFilter<"ChatSession"> | $Enums.ChatSessionStatus
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"ChatSession"> | Date | string
  lastActivity?: Prisma.DateTimeWithAggregatesFilter<"ChatSession"> | Date | string
}

export type ChatSessionCreateInput = {
  id?: string
  sessionId: string
  userName: string
  userEmail: string
  status?: $Enums.ChatSessionStatus
  createdAt?: Date | string
  lastActivity?: Date | string
  messages?: Prisma.ChatMessageCreateNestedManyWithoutSessionInput
}

export type ChatSessionUncheckedCreateInput = {
  id?: string
  sessionId: string
  userName: string
  userEmail: string
  status?: $Enums.ChatSessionStatus
  createdAt?: Date | string
  lastActivity?: Date | string
  messages?: Prisma.ChatMessageUncheckedCreateNestedManyWithoutSessionInput
}

export type ChatSessionUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  sessionId?: Prisma.StringFieldUpdateOperationsInput | string
  userName?: Prisma.StringFieldUpdateOperationsInput | string
  userEmail?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumChatSessionStatusFieldUpdateOperationsInput | $Enums.ChatSessionStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  lastActivity?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  messages?: Prisma.ChatMessageUpdateManyWithoutSessionNestedInput
}

export type ChatSessionUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  sessionId?: Prisma.StringFieldUpdateOperationsInput | string
  userName?: Prisma.StringFieldUpdateOperationsInput | string
  userEmail?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumChatSessionStatusFieldUpdateOperationsInput | $Enums.ChatSessionStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  lastActivity?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  messages?: Prisma.ChatMessageUncheckedUpdateManyWithoutSessionNestedInput
}

export type ChatSessionCreateManyInput = {
  id?: string
  sessionId: string
  userName: string
  userEmail: string
  status?: $Enums.ChatSessionStatus
  createdAt?: Date | string
  lastActivity?: Date | string
}

export type ChatSessionUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  sessionId?: Prisma.StringFieldUpdateOperationsInput | string
  userName?: Prisma.StringFieldUpdateOperationsInput | string
  userEmail?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumChatSessionStatusFieldUpdateOperationsInput | $Enums.ChatSessionStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  lastActivity?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ChatSessionUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  sessionId?: Prisma.StringFieldUpdateOperationsInput | string
  userName?: Prisma.StringFieldUpdateOperationsInput | string
  userEmail?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumChatSessionStatusFieldUpdateOperationsInput | $Enums.ChatSessionStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  lastActivity?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ChatSessionCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  sessionId?: Prisma.SortOrder
  userName?: Prisma.SortOrder
  userEmail?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  lastActivity?: Prisma.SortOrder
}

export type ChatSessionMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  sessionId?: Prisma.SortOrder
  userName?: Prisma.SortOrder
  userEmail?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  lastActivity?: Prisma.SortOrder
}

export type ChatSessionMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  sessionId?: Prisma.SortOrder
  userName?: Prisma.SortOrder
  userEmail?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  lastActivity?: Prisma.SortOrder
}

export type ChatSessionScalarRelationFilter = {
  is?: Prisma.ChatSessionWhereInput
  isNot?: Prisma.ChatSessionWhereInput
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type EnumChatSessionStatusFieldUpdateOperationsInput = {
  set?: $Enums.ChatSessionStatus
}

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string
}

export type ChatSessionCreateNestedOneWithoutMessagesInput = {
  create?: Prisma.XOR<Prisma.ChatSessionCreateWithoutMessagesInput, Prisma.ChatSessionUncheckedCreateWithoutMessagesInput>
  connectOrCreate?: Prisma.ChatSessionCreateOrConnectWithoutMessagesInput
  connect?: Prisma.ChatSessionWhereUniqueInput
}

export type ChatSessionUpdateOneRequiredWithoutMessagesNestedInput = {
  create?: Prisma.XOR<Prisma.ChatSessionCreateWithoutMessagesInput, Prisma.ChatSessionUncheckedCreateWithoutMessagesInput>
  connectOrCreate?: Prisma.ChatSessionCreateOrConnectWithoutMessagesInput
  upsert?: Prisma.ChatSessionUpsertWithoutMessagesInput
  connect?: Prisma.ChatSessionWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ChatSessionUpdateToOneWithWhereWithoutMessagesInput, Prisma.ChatSessionUpdateWithoutMessagesInput>, Prisma.ChatSessionUncheckedUpdateWithoutMessagesInput>
}

export type ChatSessionCreateWithoutMessagesInput = {
  id?: string
  sessionId: string
  userName: string
  userEmail: string
  status?: $Enums.ChatSessionStatus
  createdAt?: Date | string
  lastActivity?: Date | string
}

export type ChatSessionUncheckedCreateWithoutMessagesInput = {
  id?: string
  sessionId: string
  userName: string
  userEmail: string
  status?: $Enums.ChatSessionStatus
  createdAt?: Date | string
  lastActivity?: Date | string
}

export type ChatSessionCreateOrConnectWithoutMessagesInput = {
  where: Prisma.ChatSessionWhereUniqueInput
  create: Prisma.XOR<Prisma.ChatSessionCreateWithoutMessagesInput, Prisma.ChatSessionUncheckedCreateWithoutMessagesInput>
}

export type ChatSessionUpsertWithoutMessagesInput = {
  update: Prisma.XOR<Prisma.ChatSessionUpdateWithoutMessagesInput, Prisma.ChatSessionUncheckedUpdateWithoutMessagesInput>
  create: Prisma.XOR<Prisma.ChatSessionCreateWithoutMessagesInput, Prisma.ChatSessionUncheckedCreateWithoutMessagesInput>
  where?: Prisma.ChatSessionWhereInput
}

export type ChatSessionUpdateToOneWithWhereWithoutMessagesInput = {
  where?: Prisma.ChatSessionWhereInput
  data: Prisma.XOR<Prisma.ChatSessionUpdateWithoutMessagesInput, Prisma.ChatSessionUncheckedUpdateWithoutMessagesInput>
}

export type ChatSessionUpdateWithoutMessagesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  sessionId?: Prisma.StringFieldUpdateOperationsInput | string
  userName?: Prisma.StringFieldUpdateOperationsInput | string
  userEmail?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumChatSessionStatusFieldUpdateOperationsInput | $Enums.ChatSessionStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  lastActivity?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ChatSessionUncheckedUpdateWithoutMessagesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  sessionId?: Prisma.StringFieldUpdateOperationsInput | string
  userName?: Prisma.StringFieldUpdateOperationsInput | string
  userEmail?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumChatSessionStatusFieldUpdateOperationsInput | $Enums.ChatSessionStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  lastActivity?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type ChatSessionCountOutputType
 */

export type ChatSessionCountOutputType = {
  messages: number
}

export type ChatSessionCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  messages?: boolean | ChatSessionCountOutputTypeCountMessagesArgs
}

/**
 * ChatSessionCountOutputType without action
 */
export type ChatSessionCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatSessionCountOutputType
   */
  select?: Prisma.ChatSessionCountOutputTypeSelect<ExtArgs> | null
}

/**
 * ChatSessionCountOutputType without action
 */
export type ChatSessionCountOutputTypeCountMessagesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ChatMessageWhereInput
}


export type ChatSessionSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  sessionId?: boolean
  userName?: boolean
  userEmail?: boolean
  status?: boolean
  createdAt?: boolean
  lastActivity?: boolean
  messages?: boolean | Prisma.ChatSession$messagesArgs<ExtArgs>
  _count?: boolean | Prisma.ChatSessionCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["chatSession"]>

export type ChatSessionSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  sessionId?: boolean
  userName?: boolean
  userEmail?: boolean
  status?: boolean
  createdAt?: boolean
  lastActivity?: boolean
}, ExtArgs["result"]["chatSession"]>

export type ChatSessionSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  sessionId?: boolean
  userName?: boolean
  userEmail?: boolean
  status?: boolean
  createdAt?: boolean
  lastActivity?: boolean
}, ExtArgs["result"]["chatSession"]>

export type ChatSessionSelectScalar = {
  id?: boolean
  sessionId?: boolean
  userName?: boolean
  userEmail?: boolean
  status?: boolean
  createdAt?: boolean
  lastActivity?: boolean
}

export type ChatSessionOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "sessionId" | "userName" | "userEmail" | "status" | "createdAt" | "lastActivity", ExtArgs["result"]["chatSession"]>
export type ChatSessionInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  messages?: boolean | Prisma.ChatSession$messagesArgs<ExtArgs>
  _count?: boolean | Prisma.ChatSessionCountOutputTypeDefaultArgs<ExtArgs>
}
export type ChatSessionIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type ChatSessionIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $ChatSessionPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ChatSession"
  objects: {
    messages: Prisma.$ChatMessagePayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    sessionId: string
    userName: string
    userEmail: string
    status: $Enums.ChatSessionStatus
    createdAt: Date
    lastActivity: Date
  }, ExtArgs["result"]["chatSession"]>
  composites: {}
}

export type ChatSessionGetPayload<S extends boolean | null | undefined | ChatSessionDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ChatSessionPayload, S>

export type ChatSessionCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ChatSessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ChatSessionCountAggregateInputType | true
  }

export interface ChatSessionDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ChatSession'], meta: { name: 'ChatSession' } }
  /**
   * Find zero or one ChatSession that matches the filter.
   * @param {ChatSessionFindUniqueArgs} args - Arguments to find a ChatSession
   * @example
   * // Get one ChatSession
   * const chatSession = await prisma.chatSession.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ChatSessionFindUniqueArgs>(args: Prisma.SelectSubset<T, ChatSessionFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ChatSessionClient<runtime.Types.Result.GetResult<Prisma.$ChatSessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ChatSession that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ChatSessionFindUniqueOrThrowArgs} args - Arguments to find a ChatSession
   * @example
   * // Get one ChatSession
   * const chatSession = await prisma.chatSession.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ChatSessionFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ChatSessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ChatSessionClient<runtime.Types.Result.GetResult<Prisma.$ChatSessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ChatSession that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatSessionFindFirstArgs} args - Arguments to find a ChatSession
   * @example
   * // Get one ChatSession
   * const chatSession = await prisma.chatSession.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ChatSessionFindFirstArgs>(args?: Prisma.SelectSubset<T, ChatSessionFindFirstArgs<ExtArgs>>): Prisma.Prisma__ChatSessionClient<runtime.Types.Result.GetResult<Prisma.$ChatSessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ChatSession that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatSessionFindFirstOrThrowArgs} args - Arguments to find a ChatSession
   * @example
   * // Get one ChatSession
   * const chatSession = await prisma.chatSession.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ChatSessionFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ChatSessionFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ChatSessionClient<runtime.Types.Result.GetResult<Prisma.$ChatSessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ChatSessions that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatSessionFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ChatSessions
   * const chatSessions = await prisma.chatSession.findMany()
   * 
   * // Get first 10 ChatSessions
   * const chatSessions = await prisma.chatSession.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const chatSessionWithIdOnly = await prisma.chatSession.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ChatSessionFindManyArgs>(args?: Prisma.SelectSubset<T, ChatSessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ChatSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ChatSession.
   * @param {ChatSessionCreateArgs} args - Arguments to create a ChatSession.
   * @example
   * // Create one ChatSession
   * const ChatSession = await prisma.chatSession.create({
   *   data: {
   *     // ... data to create a ChatSession
   *   }
   * })
   * 
   */
  create<T extends ChatSessionCreateArgs>(args: Prisma.SelectSubset<T, ChatSessionCreateArgs<ExtArgs>>): Prisma.Prisma__ChatSessionClient<runtime.Types.Result.GetResult<Prisma.$ChatSessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ChatSessions.
   * @param {ChatSessionCreateManyArgs} args - Arguments to create many ChatSessions.
   * @example
   * // Create many ChatSessions
   * const chatSession = await prisma.chatSession.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ChatSessionCreateManyArgs>(args?: Prisma.SelectSubset<T, ChatSessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ChatSessions and returns the data saved in the database.
   * @param {ChatSessionCreateManyAndReturnArgs} args - Arguments to create many ChatSessions.
   * @example
   * // Create many ChatSessions
   * const chatSession = await prisma.chatSession.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ChatSessions and only return the `id`
   * const chatSessionWithIdOnly = await prisma.chatSession.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ChatSessionCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ChatSessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ChatSessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ChatSession.
   * @param {ChatSessionDeleteArgs} args - Arguments to delete one ChatSession.
   * @example
   * // Delete one ChatSession
   * const ChatSession = await prisma.chatSession.delete({
   *   where: {
   *     // ... filter to delete one ChatSession
   *   }
   * })
   * 
   */
  delete<T extends ChatSessionDeleteArgs>(args: Prisma.SelectSubset<T, ChatSessionDeleteArgs<ExtArgs>>): Prisma.Prisma__ChatSessionClient<runtime.Types.Result.GetResult<Prisma.$ChatSessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ChatSession.
   * @param {ChatSessionUpdateArgs} args - Arguments to update one ChatSession.
   * @example
   * // Update one ChatSession
   * const chatSession = await prisma.chatSession.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ChatSessionUpdateArgs>(args: Prisma.SelectSubset<T, ChatSessionUpdateArgs<ExtArgs>>): Prisma.Prisma__ChatSessionClient<runtime.Types.Result.GetResult<Prisma.$ChatSessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ChatSessions.
   * @param {ChatSessionDeleteManyArgs} args - Arguments to filter ChatSessions to delete.
   * @example
   * // Delete a few ChatSessions
   * const { count } = await prisma.chatSession.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ChatSessionDeleteManyArgs>(args?: Prisma.SelectSubset<T, ChatSessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ChatSessions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatSessionUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ChatSessions
   * const chatSession = await prisma.chatSession.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ChatSessionUpdateManyArgs>(args: Prisma.SelectSubset<T, ChatSessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ChatSessions and returns the data updated in the database.
   * @param {ChatSessionUpdateManyAndReturnArgs} args - Arguments to update many ChatSessions.
   * @example
   * // Update many ChatSessions
   * const chatSession = await prisma.chatSession.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ChatSessions and only return the `id`
   * const chatSessionWithIdOnly = await prisma.chatSession.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ChatSessionUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ChatSessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ChatSessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ChatSession.
   * @param {ChatSessionUpsertArgs} args - Arguments to update or create a ChatSession.
   * @example
   * // Update or create a ChatSession
   * const chatSession = await prisma.chatSession.upsert({
   *   create: {
   *     // ... data to create a ChatSession
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ChatSession we want to update
   *   }
   * })
   */
  upsert<T extends ChatSessionUpsertArgs>(args: Prisma.SelectSubset<T, ChatSessionUpsertArgs<ExtArgs>>): Prisma.Prisma__ChatSessionClient<runtime.Types.Result.GetResult<Prisma.$ChatSessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ChatSessions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatSessionCountArgs} args - Arguments to filter ChatSessions to count.
   * @example
   * // Count the number of ChatSessions
   * const count = await prisma.chatSession.count({
   *   where: {
   *     // ... the filter for the ChatSessions we want to count
   *   }
   * })
  **/
  count<T extends ChatSessionCountArgs>(
    args?: Prisma.Subset<T, ChatSessionCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ChatSessionCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ChatSession.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatSessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ChatSessionAggregateArgs>(args: Prisma.Subset<T, ChatSessionAggregateArgs>): Prisma.PrismaPromise<GetChatSessionAggregateType<T>>

  /**
   * Group by ChatSession.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatSessionGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ChatSessionGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ChatSessionGroupByArgs['orderBy'] }
      : { orderBy?: ChatSessionGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ChatSessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChatSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ChatSession model
 */
readonly fields: ChatSessionFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ChatSession.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ChatSessionClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  messages<T extends Prisma.ChatSession$messagesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ChatSession$messagesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ChatSession model
 */
export interface ChatSessionFieldRefs {
  readonly id: Prisma.FieldRef<"ChatSession", 'String'>
  readonly sessionId: Prisma.FieldRef<"ChatSession", 'String'>
  readonly userName: Prisma.FieldRef<"ChatSession", 'String'>
  readonly userEmail: Prisma.FieldRef<"ChatSession", 'String'>
  readonly status: Prisma.FieldRef<"ChatSession", 'ChatSessionStatus'>
  readonly createdAt: Prisma.FieldRef<"ChatSession", 'DateTime'>
  readonly lastActivity: Prisma.FieldRef<"ChatSession", 'DateTime'>
}
    

// Custom InputTypes
/**
 * ChatSession findUnique
 */
export type ChatSessionFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatSession
   */
  select?: Prisma.ChatSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatSession
   */
  omit?: Prisma.ChatSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatSessionInclude<ExtArgs> | null
  /**
   * Filter, which ChatSession to fetch.
   */
  where: Prisma.ChatSessionWhereUniqueInput
}

/**
 * ChatSession findUniqueOrThrow
 */
export type ChatSessionFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatSession
   */
  select?: Prisma.ChatSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatSession
   */
  omit?: Prisma.ChatSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatSessionInclude<ExtArgs> | null
  /**
   * Filter, which ChatSession to fetch.
   */
  where: Prisma.ChatSessionWhereUniqueInput
}

/**
 * ChatSession findFirst
 */
export type ChatSessionFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatSession
   */
  select?: Prisma.ChatSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatSession
   */
  omit?: Prisma.ChatSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatSessionInclude<ExtArgs> | null
  /**
   * Filter, which ChatSession to fetch.
   */
  where?: Prisma.ChatSessionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ChatSessions to fetch.
   */
  orderBy?: Prisma.ChatSessionOrderByWithRelationInput | Prisma.ChatSessionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ChatSessions.
   */
  cursor?: Prisma.ChatSessionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ChatSessions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ChatSessions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ChatSessions.
   */
  distinct?: Prisma.ChatSessionScalarFieldEnum | Prisma.ChatSessionScalarFieldEnum[]
}

/**
 * ChatSession findFirstOrThrow
 */
export type ChatSessionFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatSession
   */
  select?: Prisma.ChatSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatSession
   */
  omit?: Prisma.ChatSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatSessionInclude<ExtArgs> | null
  /**
   * Filter, which ChatSession to fetch.
   */
  where?: Prisma.ChatSessionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ChatSessions to fetch.
   */
  orderBy?: Prisma.ChatSessionOrderByWithRelationInput | Prisma.ChatSessionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ChatSessions.
   */
  cursor?: Prisma.ChatSessionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ChatSessions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ChatSessions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ChatSessions.
   */
  distinct?: Prisma.ChatSessionScalarFieldEnum | Prisma.ChatSessionScalarFieldEnum[]
}

/**
 * ChatSession findMany
 */
export type ChatSessionFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatSession
   */
  select?: Prisma.ChatSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatSession
   */
  omit?: Prisma.ChatSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatSessionInclude<ExtArgs> | null
  /**
   * Filter, which ChatSessions to fetch.
   */
  where?: Prisma.ChatSessionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ChatSessions to fetch.
   */
  orderBy?: Prisma.ChatSessionOrderByWithRelationInput | Prisma.ChatSessionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ChatSessions.
   */
  cursor?: Prisma.ChatSessionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ChatSessions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ChatSessions.
   */
  skip?: number
  distinct?: Prisma.ChatSessionScalarFieldEnum | Prisma.ChatSessionScalarFieldEnum[]
}

/**
 * ChatSession create
 */
export type ChatSessionCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatSession
   */
  select?: Prisma.ChatSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatSession
   */
  omit?: Prisma.ChatSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatSessionInclude<ExtArgs> | null
  /**
   * The data needed to create a ChatSession.
   */
  data: Prisma.XOR<Prisma.ChatSessionCreateInput, Prisma.ChatSessionUncheckedCreateInput>
}

/**
 * ChatSession createMany
 */
export type ChatSessionCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ChatSessions.
   */
  data: Prisma.ChatSessionCreateManyInput | Prisma.ChatSessionCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ChatSession createManyAndReturn
 */
export type ChatSessionCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatSession
   */
  select?: Prisma.ChatSessionSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ChatSession
   */
  omit?: Prisma.ChatSessionOmit<ExtArgs> | null
  /**
   * The data used to create many ChatSessions.
   */
  data: Prisma.ChatSessionCreateManyInput | Prisma.ChatSessionCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ChatSession update
 */
export type ChatSessionUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatSession
   */
  select?: Prisma.ChatSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatSession
   */
  omit?: Prisma.ChatSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatSessionInclude<ExtArgs> | null
  /**
   * The data needed to update a ChatSession.
   */
  data: Prisma.XOR<Prisma.ChatSessionUpdateInput, Prisma.ChatSessionUncheckedUpdateInput>
  /**
   * Choose, which ChatSession to update.
   */
  where: Prisma.ChatSessionWhereUniqueInput
}

/**
 * ChatSession updateMany
 */
export type ChatSessionUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ChatSessions.
   */
  data: Prisma.XOR<Prisma.ChatSessionUpdateManyMutationInput, Prisma.ChatSessionUncheckedUpdateManyInput>
  /**
   * Filter which ChatSessions to update
   */
  where?: Prisma.ChatSessionWhereInput
  /**
   * Limit how many ChatSessions to update.
   */
  limit?: number
}

/**
 * ChatSession updateManyAndReturn
 */
export type ChatSessionUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatSession
   */
  select?: Prisma.ChatSessionSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ChatSession
   */
  omit?: Prisma.ChatSessionOmit<ExtArgs> | null
  /**
   * The data used to update ChatSessions.
   */
  data: Prisma.XOR<Prisma.ChatSessionUpdateManyMutationInput, Prisma.ChatSessionUncheckedUpdateManyInput>
  /**
   * Filter which ChatSessions to update
   */
  where?: Prisma.ChatSessionWhereInput
  /**
   * Limit how many ChatSessions to update.
   */
  limit?: number
}

/**
 * ChatSession upsert
 */
export type ChatSessionUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatSession
   */
  select?: Prisma.ChatSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatSession
   */
  omit?: Prisma.ChatSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatSessionInclude<ExtArgs> | null
  /**
   * The filter to search for the ChatSession to update in case it exists.
   */
  where: Prisma.ChatSessionWhereUniqueInput
  /**
   * In case the ChatSession found by the `where` argument doesn't exist, create a new ChatSession with this data.
   */
  create: Prisma.XOR<Prisma.ChatSessionCreateInput, Prisma.ChatSessionUncheckedCreateInput>
  /**
   * In case the ChatSession was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ChatSessionUpdateInput, Prisma.ChatSessionUncheckedUpdateInput>
}

/**
 * ChatSession delete
 */
export type ChatSessionDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatSession
   */
  select?: Prisma.ChatSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatSession
   */
  omit?: Prisma.ChatSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatSessionInclude<ExtArgs> | null
  /**
   * Filter which ChatSession to delete.
   */
  where: Prisma.ChatSessionWhereUniqueInput
}

/**
 * ChatSession deleteMany
 */
export type ChatSessionDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ChatSessions to delete
   */
  where?: Prisma.ChatSessionWhereInput
  /**
   * Limit how many ChatSessions to delete.
   */
  limit?: number
}

/**
 * ChatSession.messages
 */
export type ChatSession$messagesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatMessage
   */
  select?: Prisma.ChatMessageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatMessage
   */
  omit?: Prisma.ChatMessageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatMessageInclude<ExtArgs> | null
  where?: Prisma.ChatMessageWhereInput
  orderBy?: Prisma.ChatMessageOrderByWithRelationInput | Prisma.ChatMessageOrderByWithRelationInput[]
  cursor?: Prisma.ChatMessageWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ChatMessageScalarFieldEnum | Prisma.ChatMessageScalarFieldEnum[]
}

/**
 * ChatSession without action
 */
export type ChatSessionDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatSession
   */
  select?: Prisma.ChatSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatSession
   */
  omit?: Prisma.ChatSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatSessionInclude<ExtArgs> | null
}
